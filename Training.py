# -*- coding: utf-8 -*-
"""Sci MV2 IR Mask Training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cKi6lEtD6VpL_Us0uWFW_vXAGAwvdLBP

**Importing necessary packages**
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications import VGG16
from tensorflow.keras.applications import InceptionResNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import os

"""**Initializing the initial learning rate, number of epochs to train for, and batch size**"""

from google.colab import drive
drive.mount('/content/drive')

INIT_LR = 1e-4
EPOCHS = 20
BS = 32

# grab the list of images in our dataset directory, then initialize the list of data (i.e., images) and class images
print("[INFO] loading images...")
imagePaths = list(paths.list_images("/content/drive/MyDrive/MaskIRDatasetProcessed"))
data = []
labels = []
print(imagePaths)

"""**Storing images and its labels**"""

for imagePath in imagePaths:
  # extract the class label from the filename
  label = imagePath.split(os.path.sep)[-2]
  #dfdfdgf
  image = load_img(imagePath)
  # load the input image (224x224) and preprocess it
  image = img_to_array(image)
  image = preprocess_input(image)
  # update the data and labels lists, respectively
  data.append(image)
  labels.append(label)
  #print(data.size())

"""**Converting class labels to binary values** """

# convert the data and labels to NumPy arrays
data = np.array(data, dtype="float32")
labels = np.array(labels)

# perform one-hot encoding on the labels
lb = LabelBinarizer()
labels = lb.fit_transform(labels)
# print(labels)
labels = to_categorical(labels)
# print(labels)

"""**Splitting the dataset into train , test and validate datasets**"""

# partition the data into training, validation and testing splits using 80% of the data for training and the remaining 12.5% for testing
(trainX, valX, trainY, valY) = train_test_split(data, labels,test_size=0.30, stratify=labels, random_state=42)
print("Data length : {}\n train dataset length:{}\nvalidate dataset length: {}\n".format(len(data),len(trainX), len(valX)))
# print(len(trainX), len(testX),len(trainY), len(testY))
(trainX,testX, trainY, testY) = train_test_split(trainX, trainY,test_size=0.125, stratify=trainY, random_state=42)
print("Data length : {}\n train dataset length:{}\nvalidate dataset length: {}\ntest dataset length: {}".format(len(data),len(trainX), len(valX),len(testX)))

# construct the training image generator for data augmentation
aug = ImageDataGenerator(
	rotation_range=20,
	zoom_range=0.15,
	width_shift_range=0.2,
	height_shift_range=0.2,
	shear_range=0.15,
	horizontal_flip=True,
	fill_mode="nearest")

"""**loading the MobileNetV2 network**"""

# load the MobileNetV2 network, ensuring the head FC layer sets are left off
baseModel = MobileNetV2(weights="imagenet", include_top=False,input_tensor=Input(shape=(224, 224, 3)))
#baseModel.summary() 

#baseModel = VGG16(include_top=False, input_shape=(224, 224, 3), pooling='avg')
#baseModel = InceptionResNetV2(include_top=False, input_shape=(224, 224, 3), pooling='avg')

i=0
for layer in baseModel.layers:
  i+=1
  # print(layer.output_shape)
print("number of layers in mobileNetV2 are",i)

"""**Constructing Fully Connected head model that will be placed on top of the base model**"""

# construct the head of the model that will be placed on top of the base model
headModel = baseModel.output
#headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)
# headModel.shape

"""**Constructing actual model by placing the head FC model on top of the base model**"""

# place the head FC model on top of the base model (this will become the actual model we will train)
model = Model(inputs=baseModel.input, outputs=headModel)
model.summary()

# loop over all layers in the base model and freeze them so they will *not* be updated during the first training process
for layer in baseModel.layers:
	layer.trainable = False

# compile our model
print("[INFO] compiling model...")
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="binary_crossentropy", optimizer=opt,metrics=["accuracy"])

"""**train the head of the network**"""

print("[INFO] training head...")
# print("[INFO] training head...")
# H = model.fit(
# 	aug.flow(trainX, trainY, batch_size=BS),
# 	steps_per_epoch=len(trainX) // BS,
# 	validation_data=(valX, valY),
# 	validation_steps=len(valX) // BS,
# 	epochs=EPOCHS)
H = model.fit(trainX, trainY,epochs=EPOCHS, batch_size=BS,validation_data=(valX, valY))

"""**making predictions on the testing set**"""

print("[INFO] evaluating network...")
print("class label for mask is:{} \class label for no mask is:{} ".format(0,1))
predIdxs = model.predict(testX, batch_size=BS)

act_test=testY[:20]
act_test=np.argmax(act_test, axis=1)
print("\nActual labels of test dataset:\n",act_test)

# for each image in the testing set we need to find the index of the label with corresponding largest predicted probability
predIdxs = np.argmax(predIdxs, axis=1)
print("\npredicted labels of test dataset:\n",predIdxs[:20])

results = model.evaluate(testX, testY, batch_size=128)
print("test loss, test acc:", results)

"""**showing a nicely formatted classification report**"""

print(classification_report(testY.argmax(axis=1), predIdxs,target_names=lb.classes_))

"""**Saving the Model**"""

print("[INFO] saving mask detector model...")
model.save("/content/drive/MyDrive/Sci_Output/mv2Model.model", save_format="h5")

"""**Plotting Accuracy and Loss for training and validation dataset**"""

# plot the training loss and accuracy
N = EPOCHS
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_accuracy"], label="val_acc")
plt.title("Loss and Accuracy for Training and Validation")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")
plt.savefig("/content/drive/MyDrive/Sci_Output/mv2_Accuracy_loss.png")